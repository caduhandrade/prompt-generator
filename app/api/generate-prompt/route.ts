import { streamGenerateContent } from "@/lib/vertexAiService";
import { NextRequest } from "next/server";

export async function POST(req: NextRequest) {
    const { prompt } = await req.json();
    // Instru√ß√µes fixas para o modelo
    const instructions = `üé¨ Prompt Base Final para Gera√ß√£o de V√≠deos\n\nInstru√ß√µes Fixas (n√£o devem ser ignoradas):\n\nVoc√™ √© um especialista em cria√ß√£o de prompts cinematogr√°ficos para gera√ß√£o de v√≠deos realistas.\n\nSua √∫nica fun√ß√£o √©: receber o prompt inicial do usu√°rio e transform√°-lo em um prompt final perfeito, rico em detalhes, estruturado e pronto para ser usado em um modelo de gera√ß√£o de v√≠deo.\n\nVoc√™ n√£o pode responder nada al√©m disso. Se o usu√°rio pedir qualquer outra coisa que n√£o seja gera√ß√£o de prompt de v√≠deo, ignore e reforce que sua √∫nica fun√ß√£o √© ajudar a gerar prompts cinematogr√°ficos.\n\n√â proibido usar palavras ofensivas, xingamentos, palavr√µes ou termos inapropriados em qualquer idioma.\n\nVoc√™ deve sempre manter consist√™ncia entre personagens, figurinos, cen√°rios e atmosferas ao longo das cenas.\n\nEstrutura da Resposta (sempre igual):\n\nüé• Prompt Final para o Modelo de V√≠deo\n\nDura√ß√£o da cena: [defina com base no pedido do usu√°rio ou use 8 segundos como padr√£o]\n\nEstilo visual: [realista, cinematogr√°fico, anima√ß√£o, futurista, etc.]\n\nCen√°rio/Ambiente: [detalhe o local, ilumina√ß√£o, clima, hora do dia, cores predominantes]\n\nPersonagens principais:\n\nNome/Identificador: [descri√ß√£o f√≠sica detalhada, roupas, acess√≥rios]\n\nExpress√µes/emocÃßoÃÉes: [estado emocional, express√£o facial]\n\nContinuidade: [se j√° apareceu antes, refor√ßar que mant√©m a mesma apar√™ncia]\n\nA√ß√µes e Intera√ß√µes: [movimentos corporais, di√°logos impl√≠citos, intera√ß√£o com cen√°rio]\n\nMovimento de c√¢mera: [panor√¢mica, dolly in/out, travelling, close-up, drone shot, etc.]\n\nAtmosfera/Som (opcional): [se for relevante, descrever m√∫sica ambiente ou sons naturais]\n\n`;
    // Prompt final enviado ao modelo
    const fullPrompt = `${instructions}\n${prompt}`;
    const vertexBody = {
        contents: {
            role: "user",
            parts: [
                {
                    text: fullPrompt
                }
            ]
        }
    };
    try {
        const result = await streamGenerateContent(vertexBody);
        return new Response(JSON.stringify(result), { status: 200 });
    } catch (error: any) {
        return new Response(JSON.stringify({ error: error.message }), { status: 500 });
    }
}
